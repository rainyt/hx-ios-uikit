# Generated by Haxe 4.2.1+bf9ff69
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import sys as python_lib_Sys
import traceback as python_lib_Traceback
import builtins as python_lib_Builtins
import os as python_lib_Os


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class Class: pass


class ExternBaseClass:
    _hx_class_name = "ExternBaseClass"
    __slots__ = ("pkg", "saveFile", "className", "extendClassName", "_imported", "_hdata", "funcAndAttr", "_propertys")
    _hx_fields = ["pkg", "saveFile", "className", "extendClassName", "_imported", "_hdata", "funcAndAttr", "_propertys"]
    _hx_methods = ["putClass", "toHaxeFile", "_importType", "toFuncArgs", "toFuncName"]

    def __init__(self,_hdata,hextern,defcall):
        self._hdata = None
        self.extendClassName = None
        self.className = None
        self.saveFile = None
        self.pkg = None
        self._propertys = haxe_ds_StringMap()
        self.funcAndAttr = []
        self._imported = []
        harray = _hdata.split("\n")
        pclassName = (harray[0] if 0 < len(harray) else None)
        startIndex = None
        pclassName = HxString.substr(pclassName,(((pclassName.find("@interface") if ((startIndex is None)) else HxString.indexOfImpl(pclassName,"@interface",startIndex))) + 10),None)
        startIndex = None
        if (((pclassName.find("(") if ((startIndex is None)) else HxString.indexOfImpl(pclassName,"(",startIndex))) != -1):
            startIndex = None
            pclassName = HxString.substr(pclassName,0,(pclassName.find("(") if ((startIndex is None)) else HxString.indexOfImpl(pclassName,"(",startIndex)))
            pclassName = StringTools.replace(pclassName," ","")
        else:
            _g = 0
            _g1 = len(pclassName)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((("" if (((i < 0) or ((i >= len(pclassName))))) else pclassName[i])) != " "):
                    pclassName = HxString.substr(pclassName,i,None)
                    break
            startIndex = None
            pclassName = HxString.substr(pclassName,0,(pclassName.find(" ") if ((startIndex is None)) else HxString.indexOfImpl(pclassName," ",startIndex)))
            _this = (harray[0] if 0 < len(harray) else None)
            startIndex = None
            if (((_this.find(":") if ((startIndex is None)) else HxString.indexOfImpl(_this,":",startIndex))) != -1):
                self.extendClassName = (harray[0] if 0 < len(harray) else None)
                _this = self.extendClassName
                _this1 = self.extendClassName
                startIndex1 = None
                pos = None
                if (startIndex1 is None):
                    pos = _this1.rfind(":", 0, len(_this1))
                else:
                    i = _this1.rfind(":", 0, (startIndex1 + 1))
                    startLeft = (max(0,((startIndex1 + 1) - len(":"))) if ((i == -1)) else (i + 1))
                    check = _this1.find(":", startLeft, len(_this1))
                    pos = (check if (((check > i) and ((check <= startIndex1)))) else i)
                self.extendClassName = HxString.substr(_this,(pos + 1),None)
                self.extendClassName = StringTools.replace(self.extendClassName," ","")
                self.extendClassName = StringTools.replace(self.extendClassName,"{","")
        tmp = None
        if (self.extendClassName is not None):
            _this = self.extendClassName
            startIndex = None
            tmp = ((((_this.find("<") if ((startIndex is None)) else HxString.indexOfImpl(_this,"<",startIndex))) != -1) or ((self.extendClassName == "NSObject")))
        else:
            tmp = False
        if tmp:
            self.extendClassName = None
        if (pclassName == ""):
            self.className = None
            return
        self.className = StringTools.replace(pclassName," ","")
        defcall(self)
        _this = self.funcAndAttr
        x = _hx_AnonObject({'type': "func", 'name': "alloc", 'returnClass': self.className, 'isStatic': True, 'args': None})
        _this.append(x)
        _this = self.funcAndAttr
        x = _hx_AnonObject({'type': "func", 'name': "autorelease", 'returnClass': self.className, 'isStatic': True, 'args': None})
        _this.append(x)
        _g_current = 0
        _g_array = harray
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            startIndex = None
            if (((value.find("@property") if ((startIndex is None)) else HxString.indexOfImpl(value,"@property",startIndex))) == 0):
                property = ObjcProperty.parsing(hextern.typedefs,self.className,value)
                if ((property is not None) and (not (property.name in self._propertys.h))):
                    self._propertys.h[property.name] = property
                    _this = self.funcAndAttr
                    _this.append(property)
            else:
                tmp = None
                startIndex1 = None
                if (((value.find("-") if ((startIndex1 is None)) else HxString.indexOfImpl(value,"-",startIndex1))) != 0):
                    startIndex2 = None
                    tmp = (((value.find("+") if ((startIndex2 is None)) else HxString.indexOfImpl(value,"+",startIndex2))) == 0)
                else:
                    tmp = True
                if tmp:
                    func = ObjcFun.parsing(hextern.typedefs,self.className,value)
                    if (func is not None):
                        _this1 = self.funcAndAttr
                        _this1.append(func)

    def putClass(self,t):
        self.funcAndAttr = (self.funcAndAttr + t.funcAndAttr)

    def toHaxeFile(self):
        haxe = (("package " + HxOverrides.stringOrNull(self.pkg)) + ";\n\n")
        _g_current = 0
        _g_array = self.funcAndAttr
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            c = self._importType(value.type)
            if (c is not None):
                haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("import " + ("null" if c is None else c)) + ";\n"))))
            c2 = self._importType(value.returnClass)
            if (c2 is not None):
                haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("import " + ("null" if c2 is None else c2)) + ";\n"))))
            if (value.args is not None):
                _g2_current = 0
                _g2_array = value.args
                while (_g2_current < len(_g2_array)):
                    _g3_value = (_g2_array[_g2_current] if _g2_current >= 0 and _g2_current < len(_g2_array) else None)
                    _g3_key = _g2_current
                    _g2_current = (_g2_current + 1)
                    index1 = _g3_key
                    a = _g3_value
                    c3 = self._importType(a.type)
                    if (c3 is not None):
                        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("import " + ("null" if c3 is None else c3)) + ";\n"))))
        haxe = (("null" if haxe is None else haxe) + "@:objc\n")
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("@:native(\"" + HxOverrides.stringOrNull(self.className)) + "\")\n"))))
        haxe = (("null" if haxe is None else haxe) + "@:include(\"UIKit/UIKit.h\")\n")
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull((((("extern class " + HxOverrides.stringOrNull(self.className)) + HxOverrides.stringOrNull((((" extends " + HxOverrides.stringOrNull(self.extendClassName)) if ((self.extendClassName is not None)) else "")))) + "{\n\n"))))
        _g_current = 0
        _g_array = self.funcAndAttr
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            _g = value.type
            _hx_local_7 = len(_g)
            if (_hx_local_7 == 4):
                if (_g == "func"):
                    haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("\t@:native(\"" + HxOverrides.stringOrNull(value.name)) + "\")\n"))))
                    haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((((((((("\toverload public" + HxOverrides.stringOrNull(((" static" if (value.isStatic) else "")))) + " function ") + HxOverrides.stringOrNull(self.toFuncName(value.name))) + "(") + HxOverrides.stringOrNull(((self.toFuncArgs(value.args) if ((value.args is not None)) else "")))) + "):") + HxOverrides.stringOrNull(value.returnClass)) + ";\n\n"))))
            elif (_hx_local_7 == 8):
                if (_g == "property"):
                    haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("\t@:native(\"" + HxOverrides.stringOrNull(value.name)) + "\")\n"))))
                    haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((((("\tpublic var " + HxOverrides.stringOrNull(value.name)) + ":") + HxOverrides.stringOrNull(value.returnClass)) + ";\n\n"))))
            else:
                pass
        haxe = (("null" if haxe is None else haxe) + "\n}")
        return haxe

    def _importType(self,_hx_type):
        if (python_internal_ArrayImpl.indexOf(self._imported,_hx_type,None) != -1):
            return None
        c = ObjcImport.toImport(_hx_type)
        if (c is None):
            return None
        _this = self._imported
        _this.append(_hx_type)
        return c

    def toFuncArgs(self,array):
        args = []
        _g_current = 0
        _g_array = array
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            x = ((HxOverrides.stringOrNull(value.name) + ":") + HxOverrides.stringOrNull(value.type))
            args.append(x)
        return ", ".join([python_Boot.toString1(x1,'') for x1 in args])

    def toFuncName(self,_hx_str):
        return StringTools.replace(_hx_str,":","_")



class ExternBaseClassType:
    _hx_class_name = "ExternBaseClassType"
    __slots__ = ()
    _hx_statics = ["FUNC", "PROPERTY"]


class ExternHFile:
    _hx_class_name = "ExternHFile"
    __slots__ = ("haxeSaveDir", "haxePkg", "typedefs")
    _hx_fields = ["haxeSaveDir", "haxePkg", "typedefs"]
    _hx_methods = ["defClass", "defTypedef"]

    def __init__(self,file,haxeSaveDir,haxePkg):
        self.typedefs = haxe_ds_StringMap()
        self.haxeSaveDir = haxeSaveDir
        self.haxePkg = haxePkg
        _this = sys_io_File.getContent(file)
        contents = _this.split("\n")
        read = []
        isRead = False
        isTypedef = False
        isInterface = False
        isMacro = False
        _g_current = 0
        _g_array = contents
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            if (not isRead):
                tmp = None
                if (index != 0):
                    startIndex = None
                    tmp = (((value.find("#if") if ((startIndex is None)) else HxString.indexOfImpl(value,"#if",startIndex))) != -1)
                else:
                    tmp = False
                if (not tmp):
                    startIndex1 = None
                    if (((value.find("@interface") if ((startIndex1 is None)) else HxString.indexOfImpl(value,"@interface",startIndex1))) != -1):
                        isInterface = True
                        isRead = True
                        read.append(value)
                        startIndex2 = None
                        if (((value.find("@end") if ((startIndex2 is None)) else HxString.indexOfImpl(value,"@end",startIndex2))) != -1):
                            isRead = False
                            isInterface = False
                            self.defClass("\n".join([python_Boot.toString1(x1,'') for x1 in read]))
                            read = []
                    else:
                        startIndex3 = None
                        if (((value.find("typedef ") if ((startIndex3 is None)) else HxString.indexOfImpl(value,"typedef ",startIndex3))) != -1):
                            isTypedef = True
                            isRead = True
                            read.append(value)
                            startIndex4 = None
                            if (((value.find(";") if ((startIndex4 is None)) else HxString.indexOfImpl(value,";",startIndex4))) != -1):
                                isRead = False
                                isTypedef = False
                                self.defTypedef("\n".join([python_Boot.toString1(x1,'') for x1 in read]))
                                read = []
            else:
                read.append(value)
                tmp1 = None
                if isMacro:
                    startIndex5 = None
                    tmp1 = (((value.find("#endif") if ((startIndex5 is None)) else HxString.indexOfImpl(value,"#endif",startIndex5))) != -1)
                else:
                    tmp1 = False
                if (not tmp1):
                    tmp2 = None
                    if isTypedef:
                        startIndex6 = None
                        tmp2 = (((value.find(";") if ((startIndex6 is None)) else HxString.indexOfImpl(value,";",startIndex6))) != -1)
                    else:
                        tmp2 = False
                    if tmp2:
                        isRead = False
                        isTypedef = False
                        self.defTypedef("\n".join([python_Boot.toString1(x1,'') for x1 in read]))
                        read = []
                    else:
                        tmp3 = None
                        if isInterface:
                            startIndex7 = None
                            tmp3 = (((value.find("@end") if ((startIndex7 is None)) else HxString.indexOfImpl(value,"@end",startIndex7))) != -1)
                        else:
                            tmp3 = False
                        if tmp3:
                            isRead = False
                            isInterface = False
                            self.defClass("\n".join([python_Boot.toString1(x1,'') for x1 in read]))
                            read = []

    def defClass(self,data):
        _gthis = self
        def _hx_local_0(t2):
            d = ExternTypedefClass()
            d.className = t2.className
            d.parentClassName = t2.className
            _gthis.typedefs.h[t2.className] = d
        t = ExternBaseClass(data,self,_hx_local_0)
        t.saveFile = (((HxOverrides.stringOrNull(self.haxeSaveDir) + "/") + HxOverrides.stringOrNull(t.className)) + ".hx")
        t.pkg = self.haxePkg
        if (t.className is not None):
            if (t.className in ExternTools.classDefine.h):
                ExternTools.classDefine.h.get(t.className,None).putClass(t)
            else:
                ExternTools.classDefine.h[t.className] = t

    def defTypedef(self,data):
        t = ExternTypedefClass(data)
        self.typedefs.h[t.className] = t



class ExternTools:
    _hx_class_name = "ExternTools"
    __slots__ = ()
    _hx_statics = ["classDefine", "externDir", "main", "parsingFrameworkDir", "parsingFramework", "parsingHFile"]
    externDir = None

    @staticmethod
    def main():
        ExternTools.externDir = StringTools.replace(Sys.programPath(),"extern_tools.py","../Source_extern")
        framework = StringTools.replace(Sys.programPath(),"extern_tools.py","../framework")
        ExternTools.parsingFrameworkDir(framework,ExternTools.externDir)

    @staticmethod
    def parsingFrameworkDir(indir,out):
        ExternTools.parsingFramework(indir,out)
        _hx_map = ExternTools.classDefine
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g1_value = _g_map.get(key)
            _g1_key = key
            key1 = _g1_key
            value = _g1_value
            sys_io_File.saveContent(value.saveFile,value.toHaxeFile())

    @staticmethod
    def parsingFramework(indir,out):
        files = sys_FileSystem.readDirectory(indir)
        _g_current = 0
        _g_array = files
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            if sys_FileSystem.isDirectory(((("null" if indir is None else indir) + "/") + ("null" if value is None else value))):
                ExternTools.parsingFramework(((("null" if indir is None else indir) + "/") + ("null" if value is None else value)),out)
            else:
                startIndex = None
                if (((value.find(".h") if ((startIndex is None)) else HxString.indexOfImpl(value,".h",startIndex))) != -1):
                    ExternTools.parsingHFile(((("null" if indir is None else indir) + "/") + ("null" if value is None else value)),out)

    @staticmethod
    def parsingHFile(hfile,out):
        startIndex1 = None
        startIndex = None
        if (startIndex1 is None):
            startIndex = hfile.rfind("/framework/", 0, len(hfile))
        else:
            i = hfile.rfind("/framework/", 0, (startIndex1 + 1))
            startLeft = (max(0,((startIndex1 + 1) - len("/framework/"))) if ((i == -1)) else (i + 1))
            check = hfile.find("/framework/", startLeft, len(hfile))
            startIndex = (check if (((check > i) and ((check <= startIndex1)))) else i)
        pkg = HxString.substring(hfile,(startIndex + 11),None)
        startIndex = None
        pkg = HxString.substr(pkg,0,(pkg.find(".") if ((startIndex is None)) else HxString.indexOfImpl(pkg,".",startIndex)))
        startIndex1 = None
        pos = None
        if (startIndex1 is None):
            pos = hfile.rfind("/", 0, len(hfile))
        else:
            i = hfile.rfind("/", 0, (startIndex1 + 1))
            startLeft = (max(0,((startIndex1 + 1) - len("/"))) if ((i == -1)) else (i + 1))
            check = hfile.find("/", startLeft, len(hfile))
            pos = (check if (((check > i) and ((check <= startIndex1)))) else i)
        haxefile = (HxOverrides.stringOrNull(HxString.substr(hfile,(pos + 1),None)) + "x")
        startIndex = None
        if (((haxefile.find("+") if ((startIndex is None)) else HxString.indexOfImpl(haxefile,"+",startIndex))) != -1):
            return
        classpkg = ("ios." + HxOverrides.stringOrNull(pkg.lower()))
        haxedir = ((("null" if out is None else out) + "/ios/") + HxOverrides.stringOrNull(pkg.lower()))
        c = ExternHFile(hfile,haxedir,classpkg)
        if (not sys_FileSystem.exists(haxedir)):
            sys_FileSystem.createDirectory(haxedir)
        _hx_map = c.typedefs
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g1_value = _g_map.get(key)
            _g1_key = key
            key1 = _g1_key
            value = _g1_value
            tmp = None
            _this = value.className
            startIndex = None
            if (((_this.find("<") if ((startIndex is None)) else HxString.indexOfImpl(_this,"<",startIndex))) == -1):
                _this1 = value.className
                startIndex1 = None
                tmp = (((_this1.find("(") if ((startIndex1 is None)) else HxString.indexOfImpl(_this1,"(",startIndex1))) == -1)
            else:
                tmp = False
            if tmp:
                if value.createHaxeFile:
                    sys_io_File.saveContent((((("null" if haxedir is None else haxedir) + "/") + HxOverrides.stringOrNull(value.className)) + ".hx"),value.toHaxeFile(classpkg))


class ExternTypedefClass:
    _hx_class_name = "ExternTypedefClass"
    __slots__ = ("parentClassName", "createHaxeFile", "className", "enums")
    _hx_fields = ["parentClassName", "createHaxeFile", "className", "enums"]
    _hx_methods = ["toHaxeFile"]

    def __init__(self,value = None):
        self.parentClassName = None
        self.enums = []
        self.className = None
        self.createHaxeFile = False
        if (value is None):
            return
        tmp = None
        startIndex = None
        if (((value.find("typedef NS_ENUM") if ((startIndex is None)) else HxString.indexOfImpl(value,"typedef NS_ENUM",startIndex))) != 0):
            startIndex = None
            tmp = (((value.find("typedef NS_OPTIONS") if ((startIndex is None)) else HxString.indexOfImpl(value,"typedef NS_OPTIONS",startIndex))) == 0)
        else:
            tmp = True
        self.createHaxeFile = tmp
        if self.createHaxeFile:
            startIndex = None
            cContent = HxString.substr(value,(((value.find("(") if ((startIndex is None)) else HxString.indexOfImpl(value,"(",startIndex))) + 1),None)
            startIndex = None
            cContent = HxString.substr(cContent,0,(cContent.find(")") if ((startIndex is None)) else HxString.indexOfImpl(cContent,")",startIndex)))
            cContent = StringTools.replace(cContent," ","")
            carr = cContent.split(",")
            self.className = (carr[1] if 1 < len(carr) else None)
            self.parentClassName = (carr[0] if 0 < len(carr) else None)
            enumContent = value
            startIndex = None
            enumContent = HxString.substr(enumContent,(((enumContent.find("{") if ((startIndex is None)) else HxString.indexOfImpl(enumContent,"{",startIndex))) + 1),None)
            startIndex1 = None
            _hx_len = None
            if (startIndex1 is None):
                _hx_len = enumContent.rfind("}", 0, len(enumContent))
            else:
                i = enumContent.rfind("}", 0, (startIndex1 + 1))
                startLeft = (max(0,((startIndex1 + 1) - len("}"))) if ((i == -1)) else (i + 1))
                check = enumContent.find("}", startLeft, len(enumContent))
                _hx_len = (check if (((check > i) and ((check <= startIndex1)))) else i)
            enumContent = HxString.substr(enumContent,0,_hx_len)
            e = enumContent.split("\n")
            _g_current = 0
            _g_array = e
            while (_g_current < len(_g_array)):
                _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
                _g1_key = _g_current
                _g_current = (_g_current + 1)
                index = _g1_key
                e2 = _g1_value
                def _hx_local_0(f):
                    return (len(f) > 0)
                e3 = python_internal_ArrayImpl._get(list(filter(_hx_local_0,e2.split(" "))), 0)
                tmp = None
                tmp1 = None
                if (e3 is not None):
                    startIndex = None
                    tmp1 = (((e3.find("//") if ((startIndex is None)) else HxString.indexOfImpl(e3,"//",startIndex))) != -1)
                else:
                    tmp1 = True
                if (not tmp1):
                    startIndex1 = None
                    tmp = (((e3.find("#") if ((startIndex1 is None)) else HxString.indexOfImpl(e3,"#",startIndex1))) != -1)
                else:
                    tmp = True
                if tmp:
                    continue
                e3 = StringTools.replace(e3,",","")
                _this = self.enums
                _this.append(e3)
        else:
            value = StringTools.replace(value,"*","")
            t = value.split(" ")
            t2 = ""
            _g_current = 0
            _g_array = t
            while (_g_current < len(_g_array)):
                _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
                _g1_key = _g_current
                _g_current = (_g_current + 1)
                index = _g1_key
                tv = _g1_value
                if (index < 2):
                    continue
                if (len(tv) > 0):
                    t2 = tv
                    break
            self.className = t2
            self.parentClassName = (t[1] if 1 < len(t) else None)

    def toHaxeFile(self,pkg):
        if (not self.createHaxeFile):
            return None
        haxe = (("package " + ("null" if pkg is None else pkg)) + ";\n\n")
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("import " + HxOverrides.stringOrNull(ObjcImport.toImport("NSString"))) + ";\n"))))
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("import " + HxOverrides.stringOrNull(ObjcImport.toImport("NSData"))) + ";\n"))))
        haxe = (("null" if haxe is None else haxe) + "@:objc\n")
        haxe = (("null" if haxe is None else haxe) + "@:enum\n")
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("@:native(\"" + HxOverrides.stringOrNull(self.className)) + "\")\n"))))
        haxe = (("null" if haxe is None else haxe) + "@:include(\"UIKit/UIKit.h\")\n")
        haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("extern abstract " + HxOverrides.stringOrNull(self.className)) + "(Int) from Int to Int {\n\n"))))
        _g_current = 0
        _g_array = self.enums
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("\t@:native(\"" + ("null" if value is None else value)) + "\")\n"))))
            haxe = (("null" if haxe is None else haxe) + HxOverrides.stringOrNull(((("\tvar " + ("null" if value is None else value)) + ";\n\n"))))
        haxe = (("null" if haxe is None else haxe) + "\n}")
        return haxe



class ObjcFun:
    _hx_class_name = "ObjcFun"
    __slots__ = ()
    _hx_statics = ["parsing", "parsingFuncName", "parsingArgs"]

    @staticmethod
    def parsing(typedefs,className,line):
        startIndex1 = None
        _hx_len = None
        if (startIndex1 is None):
            _hx_len = line.rfind(";", 0, len(line))
        else:
            i = line.rfind(";", 0, (startIndex1 + 1))
            startLeft = (max(0,((startIndex1 + 1) - len(";"))) if ((i == -1)) else (i + 1))
            check = line.find(";", startLeft, len(line))
            _hx_len = (check if (((check > i) and ((check <= startIndex1)))) else i)
        line = HxString.substr(line,0,(_hx_len + 1))
        startIndex = None
        isStatic = (((line.find("+") if ((startIndex is None)) else HxString.indexOfImpl(line,"+",startIndex))) == 0)
        startIndex = None
        returnClass = HxString.substr(line,0,(line.find(")") if ((startIndex is None)) else HxString.indexOfImpl(line,")",startIndex)))
        startIndex = None
        returnClass = HxString.substr(returnClass,(((returnClass.find("(") if ((startIndex is None)) else HxString.indexOfImpl(returnClass,"(",startIndex))) + 1),None)
        startIndex = None
        funcName = HxString.substr(line,(((line.find(")") if ((startIndex is None)) else HxString.indexOfImpl(line,")",startIndex))) + 1),None)
        _g = 0
        _g1 = len(funcName)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            char = ("" if (((i < 0) or ((i >= len(funcName))))) else funcName[i])
            if (char != " "):
                funcName = HxString.substr(funcName,i,None)
                break
        args = None
        _g = 0
        _g1 = len(funcName)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            end = ("" if (((i < 0) or ((i >= len(funcName))))) else funcName[i])
            if (end == " "):
                funcName = HxString.substr(funcName,0,i)
                if (funcName == ""):
                    raise haxe_Exception.thrown(("line=" + ("null" if line is None else line)))
                break
            elif (end == ":"):
                args = ObjcFun.parsingArgs(typedefs,HxString.substr(funcName,(i + 1),None))
                funcName = HxString.substr(funcName,0,i)
        startIndex = None
        c = (className if ((((returnClass.find("instancetype") if ((startIndex is None)) else HxString.indexOfImpl(returnClass,"instancetype",startIndex))) != -1)) else returnClass)
        c = ObjcType.toType(c,typedefs)
        fname = ObjcFun.parsingFuncName(funcName,args)
        if ((fname == "new") or ((fname == ""))):
            return None
        else:
            return _hx_AnonObject({'name': fname, 'type': "func", 'returnClass': c, 'isStatic': isStatic, 'args': args})

    @staticmethod
    def parsingFuncName(funcName,args):
        funcName = StringTools.replace(funcName,";","")
        if (args is None):
            return funcName
        _g_current = 0
        _g_array = args
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            if (index == 0):
                continue
            funcName = (("null" if funcName is None else funcName) + HxOverrides.stringOrNull(((":" + HxOverrides.stringOrNull(value.name)))))
        return funcName

    @staticmethod
    def parsingArgs(typedefs,line):
        isRaed = False
        args = []
        read = ""
        skin = 0
        kend = 0
        start = True
        _g = 0
        _g1 = len(line)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            char = ("" if (((i < 0) or ((i >= len(line))))) else line[i])
            if (not isRaed):
                if (char == " "):
                    skin = 1
                    isRaed = True
                    kend = 0
                elif (char == "("):
                    skin = 1
                    isRaed = True
                    kend = (kend + 1)
                elif ((char != " ") and start):
                    isRaed = True
                    kend = 0
                    start = False
            elif ((char == "(") or ((char == "<"))):
                kend = (kend + 1)
            elif ((char == ")") or ((char == ">"))):
                kend = (kend - 1)
                if (kend == 0):
                    isRaed = False
                    args.append(read)
                    read = ""
            elif ((kend == 0) and ((((char == " ") or ((char == ":"))) or ((char == ";"))))):
                isRaed = (char == " ")
                if isRaed:
                    skin = 1
                args.append(read)
                read = ""
            if (isRaed and ((skin <= 0))):
                read = (("null" if read is None else read) + ("null" if char is None else char))
            else:
                skin = (skin - 1)
        if (len(args) >= 2):
            c = (args[0] if 0 < len(args) else None)
            python_internal_ArrayImpl._set(args, 0, (args[1] if 1 < len(args) else None))
            python_internal_ArrayImpl._set(args, 1, c)
        ret = ""
        retcount = 0
        retargs = []
        _g2_current = 0
        _g2_array = args
        while (_g2_current < len(_g2_array)):
            _g3_value = (_g2_array[_g2_current] if _g2_current >= 0 and _g2_current < len(_g2_array) else None)
            _g3_key = _g2_current
            _g2_current = (_g2_current + 1)
            index = _g3_key
            value = _g3_value
            retcount = (retcount + 1)
            if (retcount == 2):
                ret = (("null" if ret is None else ret) + HxOverrides.stringOrNull(((":" + HxOverrides.stringOrNull(ObjcType.toType(value,typedefs))))))
                retcount = 0
                retargs.append(ret)
                ret = ""
            else:
                ret = (("null" if ret is None else ret) + ("null" if value is None else value))
        def _hx_local_8(f):
            retargs = None
            retargs1 = None
            retargs2 = None
            startIndex = None
            if (((f.find("UIKIT_") if ((startIndex is None)) else HxString.indexOfImpl(f,"UIKIT_",startIndex))) == -1):
                startIndex = None
                retargs2 = (((f.find("NS_") if ((startIndex is None)) else HxString.indexOfImpl(f,"NS_",startIndex))) == -1)
            else:
                retargs2 = False
            if retargs2:
                startIndex = None
                retargs1 = (((f.find("API_") if ((startIndex is None)) else HxString.indexOfImpl(f,"API_",startIndex))) == -1)
            else:
                retargs1 = False
            if retargs1:
                startIndex = None
                retargs = (((f.find("ios(") if ((startIndex is None)) else HxString.indexOfImpl(f,"ios(",startIndex))) == -1)
            else:
                retargs = False
            if retargs:
                return (f != "UI_APPEARANCE_SELECTOR")
            else:
                return False
        retargs = list(filter(_hx_local_8,retargs))
        r = []
        _g2_current = 0
        _g2_array = retargs
        while (_g2_current < len(_g2_array)):
            _g3_value = (_g2_array[_g2_current] if _g2_current >= 0 and _g2_current < len(_g2_array) else None)
            _g3_key = _g2_current
            _g2_current = (_g2_current + 1)
            index = _g3_key
            value = _g3_value
            a = value.split(":")
            if ((a[0] if 0 < len(a) else None) == ""):
                continue
            r.append(_hx_AnonObject({'name': (a[0] if 0 < len(a) else None), 'type': (a[1] if 1 < len(a) else None)}))
        return r


class ObjcImport:
    _hx_class_name = "ObjcImport"
    __slots__ = ()
    _hx_statics = ["toImport", "hasClass"]

    @staticmethod
    def toImport(_hx_type):
        if (_hx_type is None):
            return None
        type1 = _hx_type
        _hx_local_0 = len(type1)
        if (_hx_local_0 == 9):
            if (type1 == "ObjcBlock"):
                return "cpp.objc.ObjcBlock"
        elif (_hx_local_0 == 12):
            if (type1 == "NSDictionary"):
                return "cpp.objc.NSDictionary"
        elif (_hx_local_0 == 7):
            if (type1 == "NSError"):
                return "cpp.objc.NSError"
        elif (_hx_local_0 == 8):
            if (type1 == "NSObject"):
                return "cpp.objc.NSObject"
            elif (type1 == "NSString"):
                return "cpp.objc.NSString"
            elif (type1 == "Protocol"):
                return "cpp.objc.Protocol"
        elif (_hx_local_0 == 6):
            if (type1 == "NSData"):
                return "cpp.objc.NSData"
        else:
            pass
        if sys_FileSystem.exists((((HxOverrides.stringOrNull(ExternTools.externDir) + "/ios/objc/") + ("null" if _hx_type is None else _hx_type)) + ".hx")):
            return ("ios.objc." + ("null" if _hx_type is None else _hx_type))
        return None

    @staticmethod
    def hasClass(_hx_type):
        files = sys_FileSystem.readDirectory((HxOverrides.stringOrNull(ExternTools.externDir) + "/ios"))
        _g_current = 0
        _g_array = files
        while (_g_current < len(_g_array)):
            _g1_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
            _g1_key = _g_current
            _g_current = (_g_current + 1)
            index = _g1_key
            value = _g1_value
            if sys_FileSystem.exists((((((HxOverrides.stringOrNull(ExternTools.externDir) + "/ios/") + ("null" if value is None else value)) + "/") + ("null" if _hx_type is None else _hx_type)) + ".hx")):
                return True
        return False


class ObjcProperty:
    _hx_class_name = "ObjcProperty"
    __slots__ = ()
    _hx_statics = ["parsing"]

    @staticmethod
    def parsing(typedefs,className,line):
        startIndex = None
        if (((line.find("(") if ((startIndex is None)) else HxString.indexOfImpl(line,"(",startIndex))) != -1):
            startIndex = None
            line = HxString.substr(line,(line.find("(") if ((startIndex is None)) else HxString.indexOfImpl(line,"(",startIndex)),None)
        else:
            line = StringTools.replace(line,"@property","")
        line = StringTools.replace(line,"*","")
        startIndex = None
        if (((line.find("//") if ((startIndex is None)) else HxString.indexOfImpl(line,"//",startIndex))) != -1):
            startIndex1 = None
            _hx_len = None
            if (startIndex1 is None):
                _hx_len = line.rfind("//", 0, len(line))
            else:
                i = line.rfind("//", 0, (startIndex1 + 1))
                startLeft = (max(0,((startIndex1 + 1) - len("//"))) if ((i == -1)) else (i + 1))
                check = line.find("//", startLeft, len(line))
                _hx_len = (check if (((check > i) and ((check <= startIndex1)))) else i)
            line = HxString.substr(line,0,_hx_len)
        startIndex = None
        property = HxString.substr(line,0,(line.find(")") if ((startIndex is None)) else HxString.indexOfImpl(line,")",startIndex)))
        startIndex = None
        isClass = (((property.find("class") if ((startIndex is None)) else HxString.indexOfImpl(property,"class",startIndex))) != -1)
        startIndex = None
        isCopy = (((property.find("copy") if ((startIndex is None)) else HxString.indexOfImpl(property,"copy",startIndex))) != -1)
        if isCopy:
            return None
        newline = ""
        lastchat = ""
        _g = 0
        _g1 = len(line)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            chat = ("" if (((i < 0) or ((i >= len(line))))) else line[i])
            if (chat == " "):
                if (lastchat != " "):
                    newline = (("null" if newline is None else newline) + ("null" if chat is None else chat))
            else:
                newline = (("null" if newline is None else newline) + ("null" if chat is None else chat))
            lastchat = chat
        line = newline
        isRead = False
        read = ""
        skip = 0
        kend = 0
        p = []
        _g = 0
        _g1 = len(line)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            char = ("" if (((i < 0) or ((i >= len(line))))) else line[i])
            if (not isRead):
                if (char == "("):
                    isRead = True
                    skip = 1
                    kend = 1
                elif (char == " "):
                    isRead = True
                    skip = (0 if ((char != "(")) else 1)
            elif ((char == "<") or ((char == "("))):
                kend = (kend + 1)
            elif (char == ">"):
                kend = (kend - 1)
            elif (char == ")"):
                kend = (kend - 1)
                if (kend == 0):
                    isRead = False
                    p.append(read)
                    read = ""
            elif ((kend == 0) and (((char == " ") or ((char == ";"))))):
                isRead = (char == " ")
                if isRead:
                    skip = 1
                p.append(read)
                read = ""
            if (isRead and ((skip <= 0))):
                read = (("null" if read is None else read) + ("null" if char is None else char))
            else:
                skip = (skip - 1)
        def _hx_local_7(f):
            p = None
            p1 = None
            p2 = None
            startIndex = None
            if (((f.find("UIKIT_") if ((startIndex is None)) else HxString.indexOfImpl(f,"UIKIT_",startIndex))) == -1):
                startIndex = None
                p2 = (((f.find("NS_") if ((startIndex is None)) else HxString.indexOfImpl(f,"NS_",startIndex))) == -1)
            else:
                p2 = False
            if p2:
                startIndex = None
                p1 = (((f.find("API_") if ((startIndex is None)) else HxString.indexOfImpl(f,"API_",startIndex))) == -1)
            else:
                p1 = False
            if p1:
                startIndex = None
                p = (((f.find("ios(") if ((startIndex is None)) else HxString.indexOfImpl(f,"ios(",startIndex))) == -1)
            else:
                p = False
            if p:
                return (f != "UI_APPEARANCE_SELECTOR")
            else:
                return False
        p = list(filter(_hx_local_7,p))
        print(str(p))
        return _hx_AnonObject({'name': python_internal_ArrayImpl._get(p, (len(p) - 1)), 'type': ("func" if isClass else "property"), 'returnClass': ObjcType.toType(python_internal_ArrayImpl._get(p, (len(p) - 2)),typedefs), 'isStatic': isClass, 'args': None})


class ObjcType:
    _hx_class_name = "ObjcType"
    __slots__ = ()
    _hx_statics = ["toType"]

    @staticmethod
    def toType(t,typedefs):
        if (t is None):
            return t
        t = StringTools.replace(t,"nullable","")
        t = StringTools.replace(t,"__kindof","")
        t = StringTools.replace(t,"*","")
        t = StringTools.replace(t," ","")
        if (t == "SEL"):
            return "String"
        if (t == "BOOL"):
            return "Bool"
        if (t == "void"):
            return "Void"
        tmp = None
        tmp1 = None
        startIndex = None
        if (((t.find("(") if ((startIndex is None)) else HxString.indexOfImpl(t,"(",startIndex))) == -1):
            startIndex = None
            tmp1 = (((t.find("<") if ((startIndex is None)) else HxString.indexOfImpl(t,"<",startIndex))) != -1)
        else:
            tmp1 = True
        if (not tmp1):
            startIndex = None
            tmp = (((t.find("id") if ((startIndex is None)) else HxString.indexOfImpl(t,"id",startIndex))) != -1)
        else:
            tmp = True
        if tmp:
            return "Dynamic"
        if (t == "CGFloat"):
            return "Float"
        if ((t == "NSUInteger") or ((t == "NSInteger"))):
            return "Int"
        if ((typedefs is not None) and (t in typedefs.h)):
            _hx_def = typedefs.h.get(t,None)
            if (not _hx_def.createHaxeFile):
                if (_hx_def.className == _hx_def.parentClassName):
                    return _hx_def.className
                else:
                    return ObjcType.toType(_hx_def.parentClassName,typedefs)
        i = ObjcImport.hasClass(t)
        if (not i):
            return "Dynamic"
        return t


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if (t == Dynamic):
            return (v is not None)
        isBool = isinstance(v,bool)
        if ((t == Bool) and isBool):
            return True
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        if (t == str):
            return isinstance(v,str)
        isEnumType = (t == Enum)
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = (t == Class)
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["replace"]

    @staticmethod
    def replace(s,sub,by):
        _this = (list(s) if ((sub == "")) else s.split(sub))
        return by.join([python_Boot.toString1(x1,'') for x1 in _this])


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["exists", "fullPath", "isDirectory", "createDirectory", "readDirectory"]

    @staticmethod
    def exists(path):
        return python_lib_os_Path.exists(path)

    @staticmethod
    def fullPath(relPath):
        return python_lib_os_Path.realpath(relPath)

    @staticmethod
    def isDirectory(path):
        return python_lib_os_Path.isdir(path)

    @staticmethod
    def createDirectory(path):
        python_lib_Os.makedirs(path,511,True)

    @staticmethod
    def readDirectory(path):
        return python_lib_Os.listdir(path)


class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["_programPath", "programPath"]

    @staticmethod
    def programPath():
        return Sys._programPath


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
    _hx_methods = ["get", "keys"]


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "get_native"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def get_native(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e



class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(Std.string(value),previous,native)
        self.value = value

    def unwrap(self):
        return self.value



class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["get", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def get(self,key):
        return self.h.get(key,None)

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))



class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            pass
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["indexOfImpl", "substring", "substr"]

    @staticmethod
    def indexOfImpl(s,_hx_str,startIndex):
        if (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        return s.find(_hx_str, startIndex)

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["indexOf", "_get", "_set"]

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent", "saveContent"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content

    @staticmethod
    def saveContent(path,content):
        f = python_lib_Builtins.open(path,"w",-1,"utf-8",None,"")
        f.write(content)
        f.close()

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

ExternBaseClassType.FUNC = "func"
ExternBaseClassType.PROPERTY = "property"
ExternTools.classDefine = haxe_ds_StringMap()
Sys._programPath = sys_FileSystem.fullPath(python_lib_Inspect.getsourcefile(Sys))
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

ExternTools.main()
